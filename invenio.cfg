import re

from invenio_i18n import lazy_gettext as _
from oarepo import config

# glitchtip for reporting incidents
config.initialize_glitchtip()

# i18n
config.initialize_i18n()

config.configure_generic_parameters(
    code="datarepo",
    name=_("Data Harbour"),
    description=_("Catch-all repository for scientific datasets"),
    languages=(("cs", _("Czech")),),
)

config.configure_communities(
    # if you have different community roles than owner, curator and member,
    # you can specify them here
)

config.register_workflow(
    "default",
    _("Default deposition workflow"),
    "common.workflows.default.DefaultWorkflowPermissions",
    "common.workflows.default.DefaultWorkflowRequests",
)

config.configure_cron()

# to enable datacite, uncomment the following lines
# from common.config.datacite import (
#               enable_datacite,
#               datacite_default_credentials,
#               datacite_community_prefix
# )
# enable_datacite(env)
# datacite_default_credentials(
#               env.INVENIO_DATACITE_PREFIX,
#               env.INVENIO_DATACITE_USERNAME,
#               env.INVENIO_DATACITE_PASSWORD)
# )
# datacite_community_prefix(
#              "biocev",
#               env.INVENIO_DATACITE_BIOCEV_PREFIX,
#               env.INVENIO_DATACITE_BIOCEV_USERNAME,
#               env.INVENIO_DATACITE_BIOCEV_PASSWORD)

# vocabularies:
config.configure_vocabulary(
    code="languages",
    name=_("Languages"),
    description=_("Language definitions vocabulary."),
    props={
        "alpha3Code": {
            "description": _("ISO 639-2 standard 3-letter language code"),
            "icon": None,
            "label": _("Alpha3 code (English)"),
            "multiple": False,
            "placeholder": "eng, cze...",
            "search": False,
        },
    },
    dump_options=False,  # too big to dump options for LocalVocabularyField
)

# Feel free to add/override configuration options here. List of options can be
# found in the Invenio source code:
# https://github.com/inveniosoftware/invenio-app-rdm/blob/master/invenio_app_rdm/config.py


# TODO: move this to defaults
import idutils


def is_researcher_id(identifier):
    pattern = r"^[A-Za-z]+-\d{4}-\d{4}$"
    return bool(re.match(pattern, identifier))


def is_vedidk(identifier):
    cleaned_identifier = identifier.strip()
    return cleaned_identifier.isdigit() and len(cleaned_identifier) == 7


def is_scopus_id(identifier):
    return identifier.replace(".0", "").isdigit()


VOCABULARIES_NAMES_SCHEMES = {
    "orcid": {"label": "ORCID", "validator": idutils.is_orcid},
    "vedidk": {"label": "VEDIDK", "validator": is_vedidk},
    "scopusId": {"label": "Scopus ID", "validator": is_scopus_id},
    "researcherId": {"label": "Researcher ID", "validator": is_researcher_id},
}

# List of funders is curated, validators are not needed.
VOCABULARIES_FUNDER_SCHEMES = {
    "ror": {"label": "ROR", "validator": lambda identifier: True},
    "crossrefFunderId": {
        "label": "CrossrefFunderID",
        "validator": lambda identifier: True,
    },
}

# List of affiliations is curated, validators are not needed.
VOCABULARIES_AFFILIATION_SCHEMES = {
    "ror": {"label": "ROR", "validator": lambda identifier: True},
    "ico": {"label": "ICO", "validator": lambda identifier: True},
    "url": {"label": "URL", "validator": lambda identifier: True},
}
RDM_RECORDS_PERSONORG_SCHEMES = {
    "orcid": {"label": _("ORCID"), "validator": idutils.is_orcid},
    "scopusId": {"label": _("ScopusID"), "validator": is_scopus_id},
    "researcherId": {"label": _("ResearcherID"), "validator": is_researcher_id},
    "czenasAutId": {"label": _("CzenasAutID"), "validator": lambda identifier: True},
    "vedidk": {"label": _("vedIDK"), "validator": is_vedidk},
    "institutionalId": {
        "label": _("InstitutionalID"),
        "validator": lambda identifier: True,
    },
    "isni": {"label": _("ISNI"), "validator": idutils.is_isni},
    "ror": {"label": _("ROR"), "validator": idutils.is_ror},
    "ico": {"label": _("ICO"), "validator": lambda identifier: True},
    "doi": {"label": _("DOI"), "validator": idutils.is_doi},
    "url": {"label": _("URL"), "validator": lambda identifier: True},
}

RDM_RECORDS_IDENTIFIERS_SCHEMES = {
    "doi": {"label": _("DOI"), "validator": idutils.is_doi},
    "isbn": {"label": _("ISBN"), "validator": idutils.is_isbn},
}

# datacite
DATACITE_MAPPING = {
    # this is a mapping from community slug to datacite prefix, user and secret
}
